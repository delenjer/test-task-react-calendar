{"version":3,"sources":["components/ModalEvent/ModalEvent.js","components/Modal/Modal.js","components/events/events.js","components/BigCalendar/BigCalendar.js","App.js","index.js"],"names":["ModalEvent","choseColor","onSave","setNewObj","obj","onCancel","isEdit","thisTitle","thisNotes","useState","title","setTitle","color","setColor","isColorOpen","setIsColorOpen","isInputError","setInputError","notes","setNotes","handleChange","event","value","currentTarget","fieldName","name","className","action","type","classNames","placeholder","onChange","autoComplete","start","dateFormat","date","showTime","timeOnly","hourFormat","time","onClick","length","newEvent","end","allDay","resource","onChangeComplete","CustomColor","hex","Modal","onClose","x","y","children","ref","useRef","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","style","top","left","events","moment","add","startOf","formats","dayFormat","BigCalendar","localizer","momentLocalizer","setThisNotes","setThisTitle","eventArray","setEventArray","isModal","setIsModal","setIsEdit","Date","box","setNewEvent","handleClose","filter","elem","customColor","resourceTitleAccessor","startAccessor","step","popup","endAccessor","selectable","onDoubleClickEvent","item","onSelecting","eventPropGetter","background","onSelectSlot","slot","slots","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.49fcde2f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Calendar } from 'primereact/calendar';\nimport { SliderPicker } from 'react-color';\nimport classNames from 'classnames';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './UserEvent.scss';\n\nexport const ModalEvent = ({\n  choseColor, onSave, setNewObj,\n  obj, onCancel, isEdit,\n  thisTitle, thisNotes,\n}) => {\n  const [title, setTitle] = useState(!isEdit ? '' : thisTitle);\n  const [color, setColor] = useState('#3b86ff');\n  const [isColorOpen, setIsColorOpen] = useState(false);\n  const [isInputError, setInputError] = useState(false);\n  const [notes, setNotes] = useState(!isEdit ? '' : thisNotes);\n\n  const handleChange = (event) => {\n    const { value } = event.currentTarget;\n    const fieldName = event.currentTarget.name;\n\n    setInputError(false);\n\n    switch (fieldName) {\n      case 'title':\n        setTitle(value);\n        break;\n      case 'notes':\n        setNotes(value);\n        break;\n      default:\n    }\n  };\n\n  const handleCalendarDate = (date) => {\n    setNewObj({\n      ...obj, start: date.value,\n    });\n  };\n\n  const handleCalendarTime = (time) => {\n    setNewObj({\n      ...obj, start: time.value,\n    });\n  };\n\n  const handleChangeColor = (CustomColor) => {\n    setColor(CustomColor.hex);\n    choseColor(CustomColor.hex);\n  };\n\n  const handleColorsOpen = () => {\n    setIsColorOpen(true);\n  };\n\n  const handlerSave = () => {\n    if (title.length < 30 && title.length > 1) {\n      const newEvent = {\n        title,\n        start: obj.start,\n        end: obj.start,\n        allDay: true,\n        resource: [color, notes],\n      };\n\n      setIsColorOpen(false);\n      onSave(newEvent);\n    } else {\n      setInputError(true);\n    }\n  };\n\n  const handleCancel = () => {\n    setIsColorOpen(false);\n    setInputError(false);\n    setNotes('');\n    setTitle('');\n    setColor('#3b86ff');\n    onCancel();\n  };\n\n  return (\n    <form className=\"event\" action=\"#\">\n      <input\n        name=\"title\"\n        type=\"text\"\n        className={\n          classNames('event__input',\n            { 'event__input--error': isInputError })\n        }\n        placeholder=\"event name\"\n        onChange={handleChange}\n        value={title}\n        autoComplete=\"none\"\n      />\n      {isInputError && (\n        <p className=\"event__error\">\n          Put more then 0  and less then 30 symbols\n        </p>\n      )}\n      <div className=\"calendar-box\">\n        <Calendar\n          name=\"date\"\n          value={obj.start}\n          dateFormat=\"dd-mm-yy\"\n          onChange={handleCalendarDate}\n        />\n        <i className=\"icon-min far fa-calendar-alt\" />\n      </div>\n\n      <div className=\"calendar-box\">\n        <Calendar\n          name=\"time\"\n          value={obj.start}\n          showTime\n          timeOnly\n          hourFormat=\"24\"\n          onChange={handleCalendarTime}\n        />\n        <i className=\"icon-min far fa-clock\" />\n      </div>\n\n      <input\n        name=\"notes\"\n        type=\"text\"\n        className=\"event__input\"\n        placeholder=\"notes\"\n        onChange={handleChange}\n        value={notes}\n      />\n\n      <button\n        name=\"color\"\n        type=\"button\"\n        className=\"event__buttons-color\"\n        onClick={handleColorsOpen}\n      >\n        Add color\n      </button>\n\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'buttons__event',\n            'buttons__event--danger',\n            { 'buttons__event--edit': isEdit },\n          )}\n          onClick={handleCancel}\n        >\n          {!isEdit ? 'Cancel' : 'Discard'}\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handlerSave}\n          className={\n            classNames('buttons__event',\n              { 'buttons__event--edit': isEdit })\n          }\n        >\n          {!isEdit ? 'Save' : 'Edit'}\n        </button>\n      </div>\n      {isColorOpen && (\n        <SliderPicker\n          color={color}\n          onChangeComplete={handleChangeColor}\n        />\n      )}\n    </form>\n  );\n};\n\nModalEvent.propTypes = {\n  choseColor: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  setNewObj: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  obj: PropTypes.object.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  isEdit: PropTypes.bool.isRequired,\n  thisTitle: PropTypes.string.isRequired,\n  thisNotes: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './modal.scss';\n\nexport const Modal = ({ onClose, x, y, children }) => {\n  const ref = useRef(null);\n  const handleClick = (e) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n\n  return (\n    <div className=\"modal\">\n      <div\n        className=\"modal__wrapper\"\n        ref={ref}\n        style={{\n          top: `${x + 10}px`, left: `${y - 100}px`,\n        }}\n      >\n        <button\n          type=\"button\"\n          className=\"modal__close\"\n          onClick={onClose}\n        >\n          <i className=\"fa fa-times-circle\" />\n        </button>\n        <div className=\"modal__content\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import moment from 'moment';\n\nexport const events = {\n  event: [\n    {\n      start: moment(),\n      end: moment()\n        .add(1, 'days')\n        .startOf('day'),\n      title: 'Some title',\n      allDay: true,\n      resource: [],\n    },\n    {\n      title: 'some event',\n      start: moment().add(-5, 'day').startOf('day'),\n      end: moment().add(-5, 'day').startOf('day'),\n      allDay: true,\n      resource: [],\n    },\n  ],\n};\n","import React, { useState } from 'react';\n\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\n\nimport { ModalEvent } from '../ModalEvent/ModalEvent';\nimport { Modal } from '../Modal/Modal';\nimport { events } from '../events/events';\n\nimport './calendar.scss';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst formats = {\n  dateFormat: 'D',\n  dayFormat: 'ddd DD/MM',\n};\n\nexport const BigCalendar = () => {\n  const localizer = momentLocalizer(moment);\n\n  const [thisNotes, setThisNotes] = useState('');\n  const [thisTitle, setThisTitle] = useState('');\n\n  const [eventArray, setEventArray] = useState(events.event);\n  const [isModal, setIsModal] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [color, setColor] = useState('#3b86ff');\n\n  const [newEvent, setNewEvent] = useState({\n    start: new Date(),\n    end: new Date(),\n    box: [0, 0],\n  });\n\n  const handleEditEvent = (item) => {\n    const obj = {\n      ...newEvent,\n      box: [600, 480],\n    };\n\n    setThisNotes(item.resource[1]);\n    setThisTitle(item.title);\n    setNewEvent(obj);\n    if (!isModal) {\n      setIsModal(true);\n      setIsEdit(true);\n    }\n  };\n\n  const handleClose = () => {\n    if (isModal) {\n      setIsModal(false);\n      setIsEdit(false);\n    }\n  };\n\n  const setEventColor = () => ({ style: { background: color } });\n\n  const onSaveEvent = (obj) => {\n    if (isEdit) {\n      setEventArray([\n        // eslint-disable-next-line max-len\n        ...eventArray.filter(elem => elem.title !== thisTitle),\n        obj,\n      ]);\n    } else {\n      setEventArray([...eventArray, obj]);\n    }\n\n    setIsModal(false);\n  };\n\n  const createNewEvent = (slot) => {\n    if (!isModal) {\n      setIsModal(true);\n      const obj = {\n        start: slot.slots[0],\n        end: slot.slots[0],\n        box: [slot.box.x, slot.box.y],\n      };\n\n      setNewEvent(obj);\n    }\n  };\n\n  const choseColor = (customColor) => {\n    setColor(customColor);\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      {isModal && (\n        <Modal\n          onClose={handleClose}\n          x={newEvent.box[1]}\n          y={newEvent.box[0]}\n        >\n          <ModalEvent\n            thisNotes={thisNotes}\n            thisTitle={thisTitle}\n            isEdit={isEdit}\n            setNewObj={setNewEvent}\n            onCancel={handleClose}\n            onSave={onSaveEvent}\n            obj={newEvent}\n            choseColor={choseColor}\n          />\n        </Modal>\n      )}\n      <Calendar\n        resourceTitleAccessor=\"Calendar View\"\n        localizer={localizer}\n        events={eventArray}\n        startAccessor=\"start\"\n        step={60}\n        popup\n        formats={formats}\n        endAccessor=\"end\"\n        selectable=\"ignoreEvents\"\n        onDoubleClickEvent={handleEditEvent}\n        onSelecting={({ end, start }) => end === start}\n        eventPropGetter={setEventColor}\n        onSelectSlot={createNewEvent}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { BigCalendar } from './components/BigCalendar/BigCalendar';\n\nimport './App.scss';\n\nconst App = () => (\n  <BigCalendar />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}