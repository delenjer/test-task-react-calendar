{"version":3,"sources":["constants/dateTimeFormats.js","utils/index.js","constants/initialEvents.js","constants/calendarFormats.js","components/Modal/Modal.js","constants/eventOptions.js","components/Select/Select.js","components/BigCalendar/components/CreateEventForm.js","components/BigCalendar/components/EditEventForm.js","components/BigCalendar/components/WeekHeader.js","components/BigCalendar/BigCalendar.js","App.js","index.js"],"names":["DATE_TIME","UIDv4","a","Math","random","toString","replace","formatDateForList","date","time","startOrEnd","moment","set","hour","split","substring","minute","_d","formatDateOnCreateEvent","initialEvents","id","title","start","add","end","type","allDay","notes","calendarFormats","dateFormat","dayFormat","Modal","top","left","onClose","children","className","style","onClick","onKeyPress","role","tabIndex","defaultProps","eventOptions","name","Select","placeholder","options","onSelect","isError","onBlur","errorText","value","useState","isOpen","setIsOpen","selectOption","option","map","key","CreateEventForm","onCancel","onSubmit","initialValues","format","color","onChange","formikMethod","length","test","validate","values","errors","isBefore","actions","setSubmitting","render","handleBlur","setFieldValue","touched","isSubmitting","submitForm","isValid","setTouched","event","target","Boolean","disabled","EditEventForm","eventInfo","WeekHeader","localizer","momentLocalizer","BigCalendar","createModalOpen","setCreateModalOpen","editModalOpen","setEditModalOpen","eventList","setEventList","selectedSlot","setSelectedSlot","eventToEdit","setEventToEdit","editModalOffset","setEditModalOffset","currentView","setCurrentView","useEffect","DraggableCalendar","withDragAndDrop","Calendar","formats","events","startAccessor","endAccessor","showMultiDayTimes","eventPropGetter","components","week","timeGutterHeader","onSelectSlot","slot","undefined","selectable","onSelectEvent","e","pageY","pageX","draggableAccessor","resizableAccessor","onEventDrop","eventDragged","previousEvents","filter","view","onView","box","y","bounds","bottom","x","formValues","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8589f4e8.chunk.js","sourcesContent":["export const FORM_DATE = 'DD/MM/YYYY';\nexport const FORM_TIME = 'HH:mm';\nexport const DATE_TIME = `${FORM_DATE} ${FORM_TIME}`;\nexport const DATE_WITHOUT_ZERO = 'D';\nexport const WEEK_DAY_SHORT_DATE_MONTH = 'ddd DD/MM';\n","/* eslint-disable */\nimport moment from 'moment';\n\nimport { FORM_DATE, DATE_TIME } from '../constants/dateTimeFormats';\n\n/**\n * Returns unique id\n * @param {*} a\n */\nexport const UIDv4 = a => (a\n  ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)\n  : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, UIDv4));\n\n/**\n * @param {Date} date - event date, only one day event allowed\n * @param {string} [time=20:30 - 23:59] - event is happening within this time range\n * @param {string} [startOrEnd=start | end] - start or end of event range\n * Return Date for event list item\n */\nexport const formatDateForList = (date, time, startOrEnd) => {\n  if (startOrEnd === 'start') {\n    return moment(date, FORM_DATE).set({\n      hour: time.split(' - ')[0].substring(0, 2),\n      minute: time.split(' - ')[0].substring(3),\n    })._d;\n  }\n\n  return moment(date, FORM_DATE).set({\n    hour: time.split(' - ')[1].substring(0, 2),\n    minute: time.split(' - ')[1].substring(3),\n  })._d;\n};\n\n/**\n * Return Date for event list item\n * @param {Date} date - event date, only one day event allowed\n * @param {string} time\n * @param {string} [startOrEnd=start | end] - start or end of event range\n */\nexport const formatDateOnCreateEvent = (date, time, startOrEnd) => moment(\n  `${date} ${time.split(' - ')[startOrEnd === 'start' ? 0 : 1]}`,\n  DATE_TIME,\n)._d;\n","/* eslint-disable */\nimport moment from 'moment';\n\nimport { UIDv4 } from '../utils';\n\nexport const initialEvents = [\n  {\n    id: UIDv4(),\n    title: \"Get a job\",\n    start: moment().add(1, 'days')._d,\n    end: moment().add(1, 'days')._d,\n    type: 'reminder',\n    allDay: true,\n    notes: 'In the near future.',\n  },\n  {\n    id: UIDv4(),\n    title: 'Drink water',\n    start: moment().set({\n      hour: 15,\n      minute: 30,\n    })._d,\n    end: moment().set({\n      hour: 16,\n      minute: 30,\n    })._d,\n    type: 'reminder',\n    notes: 'At least a glass.',\n  },\n];\n","// eslint-disable-next-line max-len\nimport { DATE_WITHOUT_ZERO, WEEK_DAY_SHORT_DATE_MONTH } from './dateTimeFormats';\n\nexport const calendarFormats = {\n  dateFormat: DATE_WITHOUT_ZERO,\n  dayFormat: WEEK_DAY_SHORT_DATE_MONTH,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './modal.scss';\n\nexport const Modal = ({ top, left, onClose, children }) => (\n  <div\n    className=\"modal-container\"\n    style={{\n      top,\n      left: left - 50,\n    }}\n  >\n    <div className=\"modal-content\">\n      <div\n        className=\"close\"\n        onClick={onClose}\n        onKeyPress={onClose}\n        role=\"button\"\n        tabIndex=\"0\"\n      >\n        <i className=\"fa fa-times-circle\" />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n\nModal.defaultProps = {\n  children: null,\n};\n\nModal.propTypes = {\n  top: PropTypes.number.isRequired,\n  left: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.element,\n};\n","export const eventOptions = [\n  {\n    id: 'birthday',\n    name: 'birthday',\n  },\n  {\n    id: 'personal',\n    name: 'personal',\n  },\n  {\n    id: 'reminder',\n    name: 'reminder',\n  },\n  {\n    id: 'meeting',\n    name: 'meeting',\n  },\n];\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './select.scss';\n\nexport const Select = ({\n  placeholder,\n  options,\n  onSelect,\n  isError,\n  onBlur,\n  errorText,\n  value,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const selectOption = (option) => {\n    setIsOpen(false);\n    onSelect(option);\n  };\n\n  return (\n    <div className=\"select-container\">\n      <button\n        type=\"button\"\n        onClick={() => (isOpen ? setIsOpen(false) : setIsOpen(true))}\n        className={`select-button ${isError ? 'border-error' : ''} ${\n          value ? 'text-black' : ''\n        }`}\n        onBlur={onBlur}\n      >\n        {value || placeholder}\n      </button>\n      {isOpen && (\n        <div className=\"select-options\">\n          {options.map(option => (\n            <div\n              key={option.id}\n              onClick={() => selectOption(option)}\n              className=\"option\"\n              onKeyPress={() => selectOption(option)}\n              tabIndex=\"0\"\n              role=\"button\"\n            >\n              <span className={`color-indicator event-${option.id}`} />\n              <span\n                className={`${option.id === placeholder ? 'text-bold' : ''}`}\n              >\n                {option.name}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n      {errorText ? <span className=\"text-error\">{errorText}</span> : null}\n    </div>\n  );\n};\n\nSelect.defaultProps = {\n  isError: false,\n  onBlur: () => {},\n  errorText: '',\n  value: '',\n};\n\nSelect.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n    }),\n  ).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  isError: PropTypes.bool,\n  onBlur: PropTypes.func,\n  errorText: PropTypes.string,\n  value: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Formik } from 'formik';\n\nimport { eventOptions } from '../../../constants/eventOptions';\nimport { FORM_DATE, FORM_TIME } from '../../../constants/dateTimeFormats';\n\nimport { Select } from '../../Select/Select';\n\nconst CreateEventForm = ({ start, end, onCancel, onSubmit }) => {\n  const initialValues = {\n    title: '',\n    date: moment(start).format(FORM_DATE),\n    time: `${moment(start).format(FORM_TIME)} - ${moment(end).format(\n      FORM_TIME,\n    )}`,\n    notes: '',\n    color: '',\n  };\n\n  const onChange = ({ name, value }, formikMethod) => {\n    if (value.length < 31) {\n      if (\n        name === 'notes'\n        || name === 'title'\n        || (name === 'time' && /^[0-9:-\\s]*$/.test(value))\n      ) {\n        formikMethod(name, value);\n      }\n\n      if (name === 'date' && /^[0-9/]*$/.test(value)) {\n        formikMethod(name, value);\n      }\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={(values) => {\n        let errors = {};\n\n        if (values.title === '') {\n          errors = {\n            ...errors, title: 'Title is required',\n          };\n        }\n\n        if (values.date === '') {\n          errors = {\n            ...errors, date: 'Date is required',\n          };\n        }\n\n        if (values.date && moment(values.date, FORM_DATE).isBefore()) {\n          errors = {\n            ...errors, date: 'Date should be in future',\n          };\n        }\n\n        if (values.time === '') {\n          errors = {\n            ...errors, time: 'Time is required',\n          };\n        }\n\n        if (values.notes === '') {\n          errors = {\n            ...errors, notes: 'Notes is required',\n          };\n        }\n\n        if (values.color === '') {\n          errors = {\n            ...errors, color: 'Color is required',\n          };\n        }\n\n        return errors;\n      }}\n      onSubmit={(values, actions) => {\n        actions.setSubmitting(false);\n        onSubmit(values);\n      }}\n      render={({\n        values,\n        handleBlur,\n        setFieldValue,\n        errors,\n        touched,\n        isSubmitting,\n        submitForm,\n        isValid,\n        setTouched,\n      }) => (\n        <form onSubmit={submitForm}>\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>event title *</span>\n              <input\n                type=\"text\"\n                name=\"title\"\n                value={values.title}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.title && errors.title ? 'error-input' : ''\n                }`}\n              />\n              {touched.title && errors.title && (\n                <span className=\"text-error\">{errors.title}</span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>event date *</span>\n              <input\n                type=\"text\"\n                name=\"date\"\n                value={values.date}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.date && errors.date ? 'error-input' : ''\n                }`}\n              />\n              {touched.date && errors.date && (\n                <span className=\"text-error\">{errors.date}</span>\n              )}\n            </div>\n            <div\n              className={`icon-container ${\n                touched.date && errors.date ? 'error-input' : ''\n              }`}\n            >\n              <i className=\"far fa-calendar-alt\" />\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>event time *</span>\n              <input\n                type=\"text\"\n                name=\"time\"\n                value={values.time}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.time && errors.time ? 'error-input' : ''\n                }`}\n              />\n              {touched.time && errors.time && (\n                <span className=\"text-error\">{errors.time}</span>\n              )}\n            </div>\n            <div\n              className={`icon-container ${\n                touched.time && errors.time ? 'error-input' : ''\n              }`}\n            >\n              <i className=\"far fa-clock\" />\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>notes *</span>\n              <input\n                type=\"text\"\n                name=\"notes\"\n                value={values.notes}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.notes && errors.notes ? 'error-input' : ''\n                }`}\n              />\n              {touched.notes && errors.notes && (\n                <span className=\"text-error\">{errors.notes}</span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <Select\n              placeholder=\"color\"\n              value={values.color}\n              options={eventOptions}\n              onSelect={option => setFieldValue('color', option.id)}\n              isError={Boolean(touched.color) && Boolean(errors.color)}\n              onBlur={() => {\n                setTouched({\n                  ...touched,\n                  color: true,\n                });\n              }}\n              errorText={touched.color && errors.color ? errors.color : ''}\n            />\n          </div>\n\n          <div className=\"button-group\">\n            <button onClick={onCancel} type=\"button\">\n              Cancel\n            </button>\n            <button\n              onClick={submitForm}\n              type=\"button\"\n              disabled={isSubmitting || !isValid}\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      )}\n    />\n  );\n};\n\nCreateEventForm.propTypes = {\n  start: PropTypes.instanceOf(Date).isRequired,\n  end: PropTypes.instanceOf(Date).isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default CreateEventForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Formik } from 'formik';\n\nimport { eventOptions } from '../../../constants/eventOptions';\nimport { FORM_DATE, FORM_TIME } from '../../../constants/dateTimeFormats';\n\nimport { Select } from '../../Select/Select';\n\nconst EditEventForm = ({ eventInfo, onCancel, onSubmit }) => {\n  const initialValues = {\n    title: eventInfo.title,\n    date: moment(eventInfo.start).format(FORM_DATE),\n    time: `${moment(eventInfo.start).format(FORM_TIME)} - ${moment(\n      eventInfo.end,\n    ).format(FORM_TIME)}`,\n    notes: eventInfo.notes,\n    color: eventInfo.type,\n    id: eventInfo.id,\n  };\n\n  const onChange = ({ name, value }, formikMethod) => {\n    if (value.length < 31) {\n      if (\n        name === 'notes'\n        || name === 'title'\n        || (name === 'time' && /^[0-9:-\\s]*$/.test(value))\n      ) {\n        formikMethod(name, value);\n      }\n\n      if (name === 'date' && /^[0-9/]*$/.test(value)) {\n        formikMethod(name, value);\n      }\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={(values) => {\n        let errors = {};\n\n        if (values.title === '') {\n          errors = {\n            ...errors, title: 'Title is required',\n          };\n        }\n\n        if (values.date === '') {\n          errors = {\n            ...errors, date: 'Date is required',\n          };\n        }\n\n        if (values.time === '') {\n          errors = {\n            ...errors, time: 'Time is required',\n          };\n        }\n\n        if (values.notes === '') {\n          errors = {\n            ...errors, notes: 'Notes is required',\n          };\n        }\n\n        if (values.color === '') {\n          errors = {\n            ...errors, color: 'Color is required',\n          };\n        }\n\n        return errors;\n      }}\n      onSubmit={(values, actions) => {\n        actions.setSubmitting(false);\n        onSubmit(values);\n      }}\n      render={({\n        values,\n        handleBlur,\n        setFieldValue,\n        errors,\n        touched,\n        isSubmitting,\n        submitForm,\n        isValid,\n        setTouched,\n      }) => (\n        <form onSubmit={submitForm}>\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>event title *</span>\n              <input\n                type=\"text\"\n                name=\"title\"\n                value={values.title}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.title && errors.title ? 'error-input' : ''\n                }`}\n              />\n              {touched.title && errors.title && (\n                <span className=\"text-error\">{errors.title}</span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>event date *</span>\n              <input\n                type=\"text\"\n                name=\"date\"\n                value={values.date}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.date && errors.date ? 'error-input' : ''\n                }`}\n              />\n              {touched.date && errors.date && (\n                <span className=\"text-error\">{errors.date}</span>\n              )}\n            </div>\n            <div\n              className={`icon-container ${\n                touched.date && errors.date ? 'error-input' : ''\n              }`}\n            >\n              <i className=\"far fa-calendar-alt\" />\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>event time *</span>\n              <input\n                type=\"text\"\n                name=\"time\"\n                value={values.time}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.time && errors.time ? 'error-input' : ''\n                }`}\n              />\n              {touched.time && errors.time && (\n                <span className=\"text-error\">{errors.time}</span>\n              )}\n            </div>\n            <div\n              className={`icon-container ${\n                touched.time && errors.time ? 'error-input' : ''\n              }`}\n            >\n              <i className=\"far fa-clock\" />\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <div className=\"input-container\">\n              <span>notes *</span>\n              <input\n                type=\"text\"\n                name=\"notes\"\n                value={values.notes}\n                onChange={(event) => {\n                  onChange(event.target, setFieldValue);\n                }}\n                onBlur={handleBlur}\n                className={`${\n                  touched.notes && errors.notes ? 'error-input' : ''\n                }`}\n              />\n              {touched.notes && errors.notes && (\n                <span className=\"text-error\">{errors.notes}</span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"input-group\">\n            <Select\n              placeholder=\"color\"\n              value={values.color}\n              options={eventOptions}\n              onSelect={option => setFieldValue('color', option.id)}\n              isError={Boolean(touched.color) && Boolean(errors.color)}\n              onBlur={() => {\n                setTouched({\n                  ...touched,\n                  color: true,\n                });\n              }}\n              errorText={touched.color && errors.color ? errors.color : ''}\n            />\n          </div>\n\n          <div className=\"button-group\">\n            <button onClick={onCancel} type=\"button\">\n              Discard\n            </button>\n            <button\n              onClick={submitForm}\n              type=\"button\"\n              disabled={isSubmitting || !isValid}\n            >\n              Edit\n            </button>\n          </div>\n        </form>\n      )}\n    />\n  );\n};\n\nEditEventForm.propTypes = {\n  eventInfo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    notes: PropTypes.string,\n    type: PropTypes.string,\n    start: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date),\n  }).isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default EditEventForm;\n","import React from 'react';\n\nconst WeekHeader = () => (\n  <div className=\"time-gutter-week\">\n    <div />\n    <div className=\"time-gutter-all-day-label\">all day</div>\n  </div>\n);\n\nexport default WeekHeader;\n","import React, { useState, useEffect } from 'react';\n\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport moment from 'moment';\n\nimport { UIDv4, formatDateForList, formatDateOnCreateEvent } from '../../utils';\n\nimport { initialEvents } from '../../constants/initialEvents';\nimport { calendarFormats } from '../../constants/calendarFormats';\n\nimport { Modal } from '../Modal/Modal';\n\nimport './calendar.scss';\n\nimport { CreateEventForm, EditEventForm, WeekHeader } from './components';\n\nconst localizer = momentLocalizer(moment);\n\nexport const BigCalendar = () => {\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n\n  const [eventList, setEventList] = useState(initialEvents);\n  const [selectedSlot, setSelectedSlot] = useState();\n  const [eventToEdit, setEventToEdit] = useState();\n  const [editModalOffset, setEditModalOffset] = useState({\n    top: 0, left: 0,\n  });\n  const [currentView, setCurrentView] = useState('month');\n\n  useEffect(() => {\n    setCreateModalOpen(true);\n    setEditModalOpen(false);\n  }, [selectedSlot]);\n\n  useEffect(() => {\n    setEditModalOpen(true);\n    setCreateModalOpen(false);\n  }, [eventToEdit]);\n\n  const handleCreate = (formValues) => {\n    setEventList([\n      ...eventList,\n      {\n        id: UIDv4(),\n        title: formValues.title,\n        start: formatDateOnCreateEvent(\n          formValues.date,\n          formValues.time,\n          'start',\n        ),\n        end: formatDateOnCreateEvent(formValues.date, formValues.time, 'end'),\n        type: formValues.color,\n        notes: formValues.notes,\n      },\n    ]);\n    setCreateModalOpen(false);\n  };\n\n  const handleEdit = (formValues) => {\n    const previousEvents = eventList.filter(\n      event => event.id !== formValues.id,\n    );\n    const { date, time } = formValues;\n\n    setEventList([\n      ...previousEvents,\n      {\n        id: formValues.id,\n        title: formValues.title,\n        start: formatDateForList(date, time, 'start'),\n        end: formatDateForList(date, time, 'end'),\n        type: formValues.color,\n        notes: formValues.notes,\n      },\n    ]);\n    setEditModalOpen(false);\n  };\n\n  const removeEvent = () => {\n    setEventList(eventList.filter(event => event.id !== eventToEdit.id));\n    setEditModalOpen(false);\n  };\n\n  const DraggableCalendar = withDragAndDrop(Calendar);\n\n  const handleDropEvent = (eventDragged) => {\n    if (!moment(eventDragged.start).isBefore()) {\n      const previousEvents = eventList.filter(\n        event => event.id !== eventDragged.event.id,\n      );\n\n      setEventList([\n        ...previousEvents,\n        {\n          ...eventDragged.event,\n          start: eventDragged.start,\n          end: eventDragged.end,\n        },\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <DraggableCalendar\n        formats={calendarFormats}\n        localizer={localizer}\n        events={eventList}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        showMultiDayTimes\n        eventPropGetter={event => ({\n          className: `event-${event.type}`,\n        })}\n        components={{\n          week: {\n            timeGutterHeader: WeekHeader,\n          },\n        }}\n        onSelectSlot={(slot) => {\n          if (createModalOpen) {\n            setCreateModalOpen(false);\n          } else if (!editModalOpen) {\n            return !moment(slot.start).isBefore()\n              ? setSelectedSlot(slot)\n              : false;\n          } else {\n            setEventToEdit(undefined);\n            setEditModalOpen(false);\n          }\n\n          return true;\n        }}\n        selectable\n        onSelectEvent={(event, e) => {\n          setEventToEdit(event);\n          setEditModalOffset({\n            top: e.pageY + 10, left: e.pageX,\n          });\n        }}\n        draggableAccessor={() => true}\n        resizableAccessor={() => false}\n        onEventDrop={handleDropEvent}\n        view={currentView}\n        onView={(view) => {\n          setEventToEdit(undefined);\n          setCurrentView(view);\n          setEditModalOpen(false);\n          setCreateModalOpen(false);\n        }}\n      />\n      {createModalOpen && selectedSlot ? (\n        <Modal\n          top={\n            (selectedSlot.box && selectedSlot.box.y)\n            || (selectedSlot.bounds && selectedSlot.bounds.bottom)\n          }\n          left={\n            (selectedSlot.box && selectedSlot.box.x)\n            || (selectedSlot.bounds && selectedSlot.bounds.left)\n          }\n          onClose={() => setCreateModalOpen(false)}\n        >\n          <CreateEventForm\n            start={selectedSlot.start}\n            end={selectedSlot.end}\n            onCancel={() => setCreateModalOpen(false)}\n            onSubmit={handleCreate}\n          />\n        </Modal>\n      ) : null}\n      {editModalOpen && eventToEdit ? (\n        <Modal\n          top={editModalOffset.top}\n          left={editModalOffset.left}\n          onClose={() => {\n            setEventToEdit(undefined);\n            setEditModalOpen(false);\n          }}\n        >\n          <EditEventForm\n            eventInfo={eventToEdit}\n            onCancel={removeEvent}\n            onSubmit={handleEdit}\n          />\n        </Modal>\n      ) : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport { BigCalendar } from './components/BigCalendar/BigCalendar';\n\nimport './App.scss';\n\nconst App = () => (\n  <BigCalendar />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}